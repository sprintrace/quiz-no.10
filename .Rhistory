# 1. Generate Simulated Data
set.seed(123)  # for reproducibility
num_subscribers <- 1000
subscriber_ids <- 1:num_subscribers
comment_counts <- c(rpois(num_subscribers * 0.8, lambda = 2), rpois(num_subscribers * 0.2, lambda = 50))  # Generate comment counts with most low and a few high
data <- data.frame(subscriber_id = subscriber_ids, comment_count = sample(comment_counts))
# 2. Visualize the Data
hist(data$comment_count, breaks = 30, main = "Distribution of Comment Counts", xlab = "Number of Comments", ylab = "Frequency")
# 3. Implement Tests
# Test 1: Check if most subscribers have low comment counts
low_count_ratio <- sum(data$comment_count <= 5) / num_subscribers
print(paste("Ratio of subscribers with low comment counts:", low_count_ratio))
# Test 2: Check if a few subscribers have high comment counts
high_count_ratio <- sum(data$comment_count >= 50) / num_subscribers
print(paste("Ratio of subscribers with high comment counts:", high_count_ratio))
# Test 3: Check if the distribution resembles the sketched graph visually
library(dplyr)
# Set seed for reproducibility
set.seed(123)
# 1. Generate Simulated Data
num_subscribers <- 1000
subscriber_ids <- 1:num_subscribers
# Generate comment counts with most low and a few high
comment_counts <- c(rpois(num_subscribers * 0.8, lambda = 2), rpois(num_subscribers * 0.2, lambda = 50))
data <- data.frame(subscriber_id = subscriber_ids, comment_count = sample(comment_counts))
# 2. Visualize the Data
hist(data$comment_count, breaks = 30, main = "Distribution of Comment Counts", xlab = "Number of Comments", ylab = "Frequency")
# 1. Generate Simulated Data
num_subscribers <- 1000
subscriber_ids <- 1:num_subscribers
# Generate comment counts with most low and a few high
comment_counts <- c(rpois(num_subscribers * 0.8, lambda = 2), rpois(num_subscribers * 0.2, lambda = 50))
data <- data.frame(subscriber_id = subscriber_ids, comment_count = sample(comment_counts))
# 2. Visualize the Data
hist(data$comment_count, breaks = 30, main = "Distribution of Comment Counts", xlab = "Number of Comments", ylab = "Frequency")
# Set seed for reproducibility
np.random.seed(42)
# Set seed for reproducibility
set.seed(42)
# Simulate data
num_subscribers <- 1000
num_days <- 365
mean_comments_per_day <- 0.1
std_dev_comments_per_day <- 0.5
comments <- matrix(rnorm(num_subscribers * num_days, mean = mean_comments_per_day, sd = std_dev_comments_per_day), nrow = num_subscribers)
comments[comments < 0] <- 0  # Ensure no negative comments
# Calculate total comments for each subscriber
total_comments <- rowSums(comments)
# Test 1: Mean number of comments
mean_comments <- mean(total_comments)
print(paste("Test 1: Mean number of comments =", round(mean_comments, 2)))
# Test 2: Median number of comments
median_comments <- median(total_comments)
print(paste("Test 2: Median number of comments =", round(median_comments, 2)))
# Test 3: Standard deviation of comments
std_dev_comments <- sd(total_comments)
print(paste("Test 3: Standard deviation of comments =", round(std_dev_comments, 2)))
# Test 4: Percentage of subscribers with more than a threshold number of comments
threshold <- 100
percentage_above_threshold <- mean(total_comments > threshold) * 100
print(paste("Test 4: Percentage of subscribers with more than", threshold, "comments =", round(percentage_above_threshold, 2), "%"))
# Test 5: Interquartile range (IQR) of comments
q1 <- quantile(total_comments, 0.25)
q3 <- quantile(total_comments, 0.75)
iqr <- q3 - q1
print(paste("Test 5: Interquartile range (IQR) of comments =", round(iqr, 2)))
save.image("~/Quiz no.10/quiz 10/quiz 10 Rohan.RData")
# Test 1: Mean number of comments
mean_comments <- mean(total_comments)
print(paste("Test 1: Mean number of comments =", round(mean_comments, 2)))
# Test 2: Median number of comments
median_comments <- median(total_comments)
print(paste("Test 2: Median number of comments =", round(median_comments, 2)))
# Test 3: Standard deviation of comments
std_dev_comments <- sd(total_comments)
print(paste("Test 3: Standard deviation of comments =", round(std_dev_comments, 2)))
# Test 4: Percentage of subscribers with more than a threshold number of comments
threshold <- 100
percentage_above_threshold <- mean(total_comments > threshold) * 100
print(paste("Test 4: Percentage of subscribers with more than", threshold, "comments =", round(percentage_above_threshold, 2), "%"))
# Test 5: Interquartile range (IQR) of comments
q1 <- quantile(total_comments, 0.25)
q3 <- quantile(total_comments, 0.75)
iqr <- q3 - q1
print(paste("Test 5: Interquartile range (IQR) of comments =", round(iqr, 2)))
# Load required libraries
library(ggplot2)
# Plot histogram
ggplot(data.frame(total_comments), aes(x = total_comments)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(x = "Number of Comments", y = "Frequency", title = "Distribution of Comments Posted by Subscribers") +
theme_minimal()
library(openssl)
# Calculate the MD5 hash of "Monica"
hash <- openssl::md5("Monica")
hash
# Install and load the palmerpenguins package
install.packages("palmerpenguins")
library(palmerpenguins)
# Load the penguins dataset
data("penguins")
# Save as CSV file
write.csv(penguins, "penguins.csv", row.names = FALSE)
# Save as Parquet file
arrow::write_parquet(penguins, "penguins.parquet")
# Load the vroom package
install.packages("vroom")
library(vroom)
# Load the penguins dataset
data("penguins")
# Save as CSV file
write.csv(penguins, "penguins.csv", row.names = FALSE)
# Save as Parquet file
vroom_write_parquet(penguins, "penguins.parquet")
